__author__ = 'jeff'

"""
岛屿数量 -- dfs
"""

dbug = []

from collections import deque


class Solution:

    def numIslands(self, grid) -> int:
        """"""
        book = set()
        stack = deque()
        res = 0
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                node = grid[i][j]
                node_name = '%s|%s' % (i, j)
                if node == '0':
                    continue
                if node_name not in book:
                    self.dfs(grid, stack, book, [i, j])
                    # tree_set = set()
                    # tree_set.add(node_name)
                    # self.recursive_dfs(grid, book, [i, j], tree_set=tree_set)
                    res += 1
                # if node_name not in book:
                #     self.bfs(book, grid, [i, j])
                #     res += 1
        return res

    def dfs(self, grid, stack, book, root_node):
        """"""
        stack.append([root_node[0], root_node[1], 0])
        node_name = '%s|%s' % (root_node[0], root_node[1])
        book.add(node_name)
        # tree_set = set()
        while len(stack) > 0:
            n = stack[-1]
            if n[2] < 4:
                n[2] += 1
                new_node = self.get_next_node(grid, n[0], n[1], n[2])
                if new_node is None:
                    continue
                else:
                    new_node_name = '%s|%s' % (new_node[0], new_node[1])
                    if new_node_name in book:
                        continue
                    else:
                        stack.append([new_node[0], new_node[1], 0])
                        book.add(new_node_name)
            else:
                p_n = stack.pop()
                # tree_set.add('%s|%s' % (p_n[0], p_n[1]))

    def recursive_dfs(self, grid, book, node, tree_set=set()):
        for i in range(1, 5):
            new_node = self.get_next_node(grid, node[0], node[1], i)
            if new_node is None:
                continue
            else:
                new_name = '%s|%s' % (new_node[0], new_node[1])
                if new_name in book:
                    continue
                book.add(new_name)
                tree_set.add(new_name)
                self.recursive_dfs(grid, book, new_node, tree_set)

    def get_next_node(self, g, i, j, k):
        """"""
        x, y = i, j
        if k == 1:
            x -= 1
        elif k == 2:
            x += 1
        elif k == 3:
            y -= 1
        elif k == 4:
            y += 1
        if x < 0 or y < 0 or x >= len(g) or y >= len(g[i]):
            return None
        else:
            if g[x][y] == '1':
                return [x, y]


    def bfs(self, book, grid, node):
        from queue import Queue
        q = Queue()
        q.put(node)
        node_name = '%s|%s' % (node[0], node[1])
        book.add(node_name)
        while not q.empty():
            n = q.get()
            for i in range(1, 5):
                new_node = self.get_next_node(grid, n[0], n[1], i)
                if new_node is None:
                    continue
                else:
                    new_name = '%s|%s' % (new_node[0], new_node[1])
                    if new_name in book:
                        continue
                    q.put(new_node)
                    book.add(new_name)

def test():
    """"""
    x1 = [{'10', '00'}, {'04', '03', '14', '26', '23', '24', '05', '25', '33', '13', '34'}, {'08', '07', '17'}, {'311', '211', '210', '111', '312', '313'}, {'113'}, {'115'}, {'118', '218'}, {'28'}, {'216', '316'}, {'78', '69', '88', '67', '57', '79', '49', '510', '87', '48', '47', '37', '59'}, {'319'}, {'50'}, {'55'}, {'617', '716', '817', '718', '517', '717'}, {'619', '519'}, {'63', '73'}, {'711', '611'}, {'713', '813', '714', '613'}, {'615'}, {'75'}, {'84'}, {'819'}, {'92'}, {'95'}, {'1011', '911'}, {'1114', '1113', '1014', '1112', '914'}, {'1018', '918'}, {'100'}, {'103'}, {'1016', '1116', '1117'}, {'117'}, {'119', '1110'}, {'120', '131', '121'}, {'123'}, {'128'}, {'1215'}, {'1219'}, {'143', '142', '136', '144', '153', '135', '134'}, {'1311', '1313', '1314', '1413', '1310', '1312'}, {'1316'}, {'149', '148'}, {'1415'}, {'150', '160'}, {'155'}, {'1510'}, {'1514'}, {'1516'}, {'1519', '1518'}, {'171', '162', '172', '181'}, {'169'}, {'1613'}, {'1715', '1615', '1815', '1916', '1717', '1915', '1716', '1714'}, {'198', '196', '187', '199', '186', '197', '176', '177', '178'}, {'1810', '1710'}, {'1712', '1812'}, {'1819', '1818'}, {'1911'}]
    x2 = [{'00', '10'}, {'25', '33', '34', '26', '04', '03', '14', '23', '13', '05', '24'}, {'07', '17', '08'}, {'111', '312', '313', '211', '210', '311'}, {'113'}, {'115'}, {'218', '118'}, {'28'}, {'216', '316'}, {'57', '87', '48', '67', '47', '69', '78', '88', '49', '79', '510', '59', '37'}, {'319'}, {'50'}, {'55'}, {'517', '718', '716', '717', '617', '817'}, {'519', '619'}, {'63', '73'}, {'711', '611'}, {'813', '713', '714', '613'}, {'615'}, {'75'}, {'84'}, {'819'}, {'92'}, {'95'}, {'1011', '911'}, {'914', '1014', '1112', '1114', '1113'}, {'1018', '918'}, {'100'}, {'103'}, {'1117', '1016', '1116'}, {'115'}, {'117'}, {'1110', '119'}, {'120', '121', '131'}, {'123'}, {'128'}, {'1215'}, {'1219'}, {'153', '136', '135', '143', '134', '142', '144'}, {'1312', '1310', '1313', '1413', '1311', '1314'}, {'1316'}, {'148', '149'}, {'1415'}, {'160', '150'}, {'155'}, {'1510'}, {'1514'}, {'1516'}, {'1518', '1519'}, {'171', '162', '172', '181'}, {'169'}, {'1613'}, {'1714', '1915', '1717', '1716', '1916', '1715', '1615', '1815'}, {'176', '196', '177', '186', '197', '198', '199', '187', '178'}, {'1710', '1810'}, {'1812', '1712'}, {'1818', '1819'}, {'1911'}]
    res = []
    k = 0
    # for i in x2:
    #     k += 1
    #     m = 0
    #     for j in x2:
    #         if i == j:
    #             m = 1
    #     if m == 0:
    #         res.append(i)
    # print(res)
    for i in range(58):
        for j in range(58):
            if i == j:
                continue
            if x2[i] == x2[j]:
                print()


if __name__ == '__main__':
    # test()
    g = """11110
11010
11000
00000"""
    g = """11000
11000
00100
00011"""
    grid = []
    for i in g.split('\n'):
        grid.append(list(i))
    grid = [["1","0","0","1","1","1","0","1","1","0","0","0","0","0","0","0","0","0","0","0"],
            ["1","0","0","1","1","0","0","1","0","0","0","1","0","1","0","1","0","0","1","0"],
            ["0","0","0","1","1","1","1","0","1","0","1","1","0","0","0","0","1","0","1","0"],
            ["0","0","0","1","1","0","0","1","0","0","0","1","1","1","0","0","1","0","0","1"],
            ["0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0"],
            ["1","0","0","0","0","1","0","1","0","1","1","0","0","0","0","0","0","1","0","1"],
            ["0","0","0","1","0","0","0","1","0","1","0","1","0","1","0","1","0","1","0","1"],
            ["0","0","0","1","0","1","0","0","1","1","0","1","0","1","1","0","1","1","1","0"],
            ["0","0","0","0","1","0","0","1","1","0","0","0","0","1","0","0","0","1","0","1"],
            ["0","0","1","0","0","1","0","0","0","0","0","1","0","0","1","0","0","0","1","0"],
            ["1","0","0","1","0","0","0","0","0","0","0","1","0","0","1","0","1","0","1","0"],
            ["0","1","0","0","0","1","0","1","0","1","1","0","1","1","1","0","1","1","0","0"],
            ["1","1","0","1","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","1"],
            ["0","1","0","0","1","1","1","0","0","0","1","1","1","1","1","0","1","0","0","0"],
            ["0","0","1","1","1","0","0","0","1","1","0","0","0","1","0","1","0","0","0","0"],
            ["1","0","0","1","0","1","0","0","0","0","1","0","0","0","1","0","1","0","1","1"],
            ["1","0","1","0","0","0","0","0","0","1","0","0","0","1","0","1","0","0","0","0"],
            ["0","1","1","0","0","0","1","1","1","0","1","0","1","0","1","1","1","1","0","0"],
            ["0","1","0","0","0","0","1","1","0","0","1","0","1","0","0","1","0","0","1","1"],
            ["0","0","0","0","0","0","1","1","1","1","0","1","0","0","0","1","1","0","0","0"]
            ]
    # grid = ['1']
    obj = Solution()
    res = obj.numIslands(grid)
    # print(obj.num)
    # print(obj.t)
    print(dbug)
    print(res)


